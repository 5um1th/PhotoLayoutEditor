var App = React.createClass({

	displayName: 'photo-layout-editor',

	/**
  * render
  */
	render: function () {
		return React.createElement(
			"div",
			{ className: "ple-editor" },
			React.createElement(Header, null),
			React.createElement(Container, null),
			React.createElement(Sidebar, null)
		);
	}
});
var Container_Gridster = React.createClass({

	displayName: 'Gridster',

	/**
  * render
  */
	render: function () {
		return React.createElement(
			"div",
			{ className: "gridster" },
			".gridster"
		);
	}
});

var Container_NavBottom = React.createClass({

	displayName: 'Nav-bottom',

	actGenerator: function () {
		log('ACTION GENERATE');
	},

	/**
  * render
  */
	render: function () {
		return React.createElement(
			'nav',
			{ className: 'nav-bottom' },
			React.createElement(
				'button',
				{ type: 'button', title: 'Generate export', onClick: this.props.generate },
				React.createElement('i', { className: 'sp-ico ico-check' }),
				React.createElement(
					'span',
					null,
					'Generate'
				)
			)
		);
	}
});
var Container_NavTop_Form = React.createClass({

	displayName: 'Form',

	propTypes: {
		update: React.PropTypes.func
	},

	getInitialState: function () {
		return {
			width: 100,
			height: 100,
			max_col: 5,
			outer_margin: 10,
			inner_margin: 10
		};
	},

	submit: function () {
		this.props.update(this.state);
		return false;
	},

	reset: function () {
		this.setState(this.getInitialState());
	},

	/**
  * render
  */
	render: function () {
		return React.createElement(
			"article",
			{ className: "form", id: "settings" },
			React.createElement(
				"form",
				{ method: "post" },
				React.createElement(
					"fieldset",
					null,
					React.createElement(
						"legend",
						{ className: "blind" },
						"Settings form"
					),
					React.createElement(
						"h1",
						null,
						"Settings"
					),
					React.createElement(
						"dl",
						null,
						React.createElement(
							"dt",
							null,
							React.createElement(
								"label",
								{ htmlhtmlFor: "frm_name" },
								"Min Width"
							)
						),
						React.createElement(
							"dd",
							null,
							React.createElement("input", {
								type: "number", name: "width", id: "frm_name",
								min: "1", max: "999", maxLength: "3",
								defaultValue: this.state.width,
								required: true }),
							React.createElement(
								"span",
								null,
								"px"
							)
						)
					),
					React.createElement(
						"dl",
						null,
						React.createElement(
							"dt",
							null,
							React.createElement(
								"label",
								{ htmlFor: "frm_height" },
								"Min Height"
							)
						),
						React.createElement(
							"dd",
							null,
							React.createElement("input", {
								type: "number", name: "height", id: "frm_height",
								min: "1", max: "999",
								defaultValue: this.state.height }),
							React.createElement(
								"span",
								null,
								"px"
							)
						)
					),
					React.createElement(
						"dl",
						null,
						React.createElement(
							"dt",
							null,
							React.createElement(
								"label",
								{ htmlFor: "frm_max_col" },
								"Max Column"
							)
						),
						React.createElement(
							"dd",
							null,
							React.createElement("input", {
								type: "number", name: "max_col", id: "frm_max_col",
								min: "1", max: "99",
								defaultValue: this.state.max_col }),
							React.createElement(
								"span",
								null,
								"ea"
							)
						)
					),
					React.createElement(
						"dl",
						null,
						React.createElement(
							"dt",
							null,
							React.createElement(
								"label",
								{ htmlFor: "frm_outer_margin" },
								"Outer Margin"
							)
						),
						React.createElement(
							"dd",
							null,
							React.createElement("input", {
								type: "number", name: "outer_margin", id: "frm_outer_margin",
								min: "1", max: "500",
								defaultValue: this.state.outer_margin }),
							React.createElement(
								"span",
								null,
								"px"
							)
						)
					),
					React.createElement(
						"dl",
						null,
						React.createElement(
							"dt",
							null,
							React.createElement(
								"label",
								{ htmlFor: "frm_inner_margin" },
								"Inner Margin"
							)
						),
						React.createElement(
							"dd",
							null,
							React.createElement("input", {
								type: "number", name: "inner_margin", id: "frm_inner_margin",
								min: "1", max: "500",
								defaultValue: this.state.inner_margin }),
							React.createElement(
								"span",
								null,
								"px"
							)
						)
					)
				),
				React.createElement(
					"nav",
					null,
					React.createElement(
						"span",
						null,
						React.createElement(
							"button",
							{ type: "reset", onClick: this.reset },
							"Reset"
						)
					),
					React.createElement(
						"span",
						null,
						React.createElement(
							"button",
							{ type: "button", className: "submit", onClick: this.submit },
							"Apply"
						)
					)
				)
			)
		);
	}
});
var Container_NavTop = React.createClass({

	displayName: 'Nav-top',

	getInitialState: function () {
		return {
			show_form: false
		};
	},

	/**
  * CLICK EVENTS
  */

	/**
  * Toggle setting form
  */
	toggleSetting: function (e) {
		var self = this;
		if (!this.state.show_form == true) {
			$(document).on('click', function (e) {
				if (!$(e.target).closest('#settings').length) {
					e.preventDefault();
					$(this).off('click');
					self.setState({ show_form: false });
				}
			});
		}
		this.setState({ show_form: !this.state.show_form });
	},

	/**
  * Action shuffle blocks
  */
	actShuffleBlocks: function () {
		log('action shuffle blocks');
	},

	/**
  * Action add blocks
  */
	actAddBlocks: function () {
		log('action add blocks');
	},

	/**
  * RENDER
  */
	render: function () {
		return React.createElement(
			'nav',
			{ className: 'nav-top' },
			React.createElement(
				'div',
				{ className: 'block' + (this.state.show_form ? ' is-active' : '') },
				React.createElement(
					'button',
					{ type: 'button', title: 'Edit preference', onClick: this.toggleSetting },
					React.createElement(
						'i',
						{ className: 'sp-ico ico-setting abs' },
						'Setting'
					)
				),
				React.createElement(Container_NavTop_Form, { update: this.props.update })
			),
			React.createElement(
				'div',
				{ className: 'block' },
				React.createElement(
					'button',
					{ type: 'button', title: 'Shuffle block', onClick: this.actShuffleBlocks },
					React.createElement(
						'i',
						{ className: 'sp-ico ico-arrow-random abs' },
						'Random block'
					)
				)
			),
			React.createElement(
				'div',
				{ className: 'block' },
				React.createElement(
					'button',
					{ type: 'button', title: 'Add block', onClick: this.actAddBlocks },
					React.createElement(
						'i',
						{ className: 'sp-ico ico-plus abs' },
						'Add block'
					)
				)
			)
		);
	}
});
var Container = React.createClass({

	displayName: 'Container',

	updatePreference: function (params) {
		log('trigger update setting');
		log(params);
	},

	/**
  * Generate
  */
	generate: function () {
		log('generate output');
	},

	/**
  * render
  */
	render: function () {
		return React.createElement(
			'div',
			{ className: 'ple-container' },
			React.createElement(Container_NavTop, { update: this.updatePreference }),
			React.createElement(Container_Gridster, null),
			React.createElement(Container_NavBottom, { generate: this.generate })
		);
	}
});
var Header = React.createClass({

	displayName: 'header',

	componentDidMount: function () {},

	render: function () {
		return React.createElement(
			"header",
			{ className: "ple-header" },
			React.createElement(
				"h1",
				null,
				"Photo Layout Editor"
			),
			React.createElement(
				"p",
				null,
				"사진 레이아웃 에디터입니다. 처음 시작하면 먼저 문서설정을 해주세요!"
			)
		);
	}
});
var Sidebar_Nav = React.createClass({

	displayName: 'Navigation',

	// TODO : 이미지 업로드 만들기

	/**
  * Attach images
  */
	attachImages: function () {
		log('attach image to grid block');
	},

	/**
  * Upload images
  */
	upload: function (e) {
		for (var i = 0; i < e.target.files.length; i++) {
			log(e.target.files[i]);
		}
		e.target.select();
		log(document.selection);
		//document.selection.clear();
	},

	/**
  * Remove images
  */
	remove: function () {
		log('remove image');
	},

	/**
  * render
  */
	render: function () {
		return React.createElement(
			'nav',
			{ className: 'nav-top' },
			React.createElement(
				'div',
				{ className: 'wrap' },
				React.createElement(
					'button',
					{ type: 'button', title: 'attach images', onClick: this.attachImages },
					React.createElement(
						'i',
						{ className: 'sp-ico ico-arrow-left abs' },
						'Moving the image to grid block'
					)
				),
				React.createElement(
					'span',
					{ title: 'upload images' },
					React.createElement('input', { type: 'file', onChange: this.upload, multiple: true }),
					React.createElement(
						'i',
						{ className: 'sp-ico ico-upload abs' },
						'upload images'
					)
				),
				React.createElement(
					'button',
					{ type: 'button', title: 'remove images', onClick: this.remove },
					React.createElement(
						'i',
						{ className: 'sp-ico ico-trash abs' },
						'remove images'
					)
				)
			)
		);
	}
});
// <button type="button" onClick={this.upload}></button>

var Sidebar_UploadFiles = React.createClass({

	displayName: 'UploadFiles',

	/**
  * render
  */
	render: function () {
		var style = [{ backgroundImage: 'url(./assets/img/tmp-simg-01.jpg)' }, { backgroundImage: 'url(./assets/img/tmp-simg-02.jpg)' }, { backgroundImage: 'url(./assets/img/tmp-simg-03.jpg)' }, { backgroundImage: 'url(./assets/img/tmp-simg-04.jpg)' }];
		return React.createElement(
			'div',
			{ className: 'upload-files' },
			React.createElement(
				'ul',
				null,
				React.createElement(
					'li',
					null,
					React.createElement(
						'span',
						{ style: style[0] },
						'.img'
					)
				),
				React.createElement(
					'li',
					null,
					React.createElement(
						'span',
						{ style: style[1] },
						'.img'
					)
				),
				React.createElement(
					'li',
					null,
					React.createElement(
						'span',
						{ style: style[2] },
						'.img'
					)
				),
				React.createElement(
					'li',
					null,
					React.createElement(
						'span',
						{ style: style[3] },
						'.img'
					)
				)
			)
		);
	}
});
var Sidebar = React.createClass({

	displayName: 'Sidebar',

	upload: function () {
		log('upload file');
	},

	remove: function () {
		log('remove file');
	},

	attach: function () {
		log('attach file');
	},

	/**
  * render
  */
	render: function () {
		return React.createElement(
			'aside',
			{ className: 'ple-sidebar' },
			React.createElement(Sidebar_Nav, { upload: this.upload, remove: this.remove, attach: this.attach }),
			React.createElement(Sidebar_UploadFiles, null)
		);
	}
});
//# sourceMappingURL=../maps/PhotoLayoutEditor.min.js.map
