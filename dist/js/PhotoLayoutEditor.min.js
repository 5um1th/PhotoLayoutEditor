var App = React.createClass({

	displayName: 'photo-layout-editor',

	/**
  * render
  */
	render: function () {
		return React.createElement(
			"div",
			{ className: "ple-editor" },
			React.createElement(Header, null),
			React.createElement(Container, null),
			React.createElement(Sidebar, { uploadScript: this.props.uploadScript })
		);
	}
});
var Container_Gridster = React.createClass({

	displayName: 'Gridster',

	/**
  * render
  */
	render: function () {
		return React.createElement(
			"div",
			{ className: "gridster" },
			".gridster"
		);
	}
});

var Container_NavBottom = React.createClass({

	displayName: 'Nav-bottom',

	actGenerator: function () {
		log('ACTION GENERATE');
	},

	/**
  * render
  */
	render: function () {
		return React.createElement(
			'nav',
			{ className: 'nav-bottom' },
			React.createElement(
				'button',
				{ type: 'button', title: 'Generate export', onClick: this.props.generate },
				React.createElement('i', { className: 'sp-ico ico-check' }),
				React.createElement(
					'span',
					null,
					'Generate'
				)
			)
		);
	}
});
var Container_NavTop_Form = React.createClass({

	displayName: 'Form',

	propTypes: {
		update: React.PropTypes.func
	},

	getInitialState: function () {
		return {
			width: 100,
			height: 100,
			max_col: 5,
			outer_margin: 10,
			inner_margin: 10
		};
	},

	submit: function () {
		this.props.update(this.state);
		return false;
	},

	reset: function () {
		this.setState(this.getInitialState());
	},

	/**
  * render
  */
	render: function () {
		return React.createElement(
			"article",
			{ className: "form", id: "settings" },
			React.createElement(
				"form",
				{ method: "post" },
				React.createElement(
					"fieldset",
					null,
					React.createElement(
						"legend",
						{ className: "blind" },
						"Settings form"
					),
					React.createElement(
						"h1",
						null,
						"Settings"
					),
					React.createElement(
						"dl",
						null,
						React.createElement(
							"dt",
							null,
							React.createElement(
								"label",
								{ htmlhtmlFor: "frm_name" },
								"Min Width"
							)
						),
						React.createElement(
							"dd",
							null,
							React.createElement("input", {
								type: "number", name: "width", id: "frm_name",
								min: "1", max: "999", maxLength: "3",
								defaultValue: this.state.width,
								required: true }),
							React.createElement(
								"span",
								null,
								"px"
							)
						)
					),
					React.createElement(
						"dl",
						null,
						React.createElement(
							"dt",
							null,
							React.createElement(
								"label",
								{ htmlFor: "frm_height" },
								"Min Height"
							)
						),
						React.createElement(
							"dd",
							null,
							React.createElement("input", {
								type: "number", name: "height", id: "frm_height",
								min: "1", max: "999",
								defaultValue: this.state.height }),
							React.createElement(
								"span",
								null,
								"px"
							)
						)
					),
					React.createElement(
						"dl",
						null,
						React.createElement(
							"dt",
							null,
							React.createElement(
								"label",
								{ htmlFor: "frm_max_col" },
								"Max Column"
							)
						),
						React.createElement(
							"dd",
							null,
							React.createElement("input", {
								type: "number", name: "max_col", id: "frm_max_col",
								min: "1", max: "99",
								defaultValue: this.state.max_col }),
							React.createElement(
								"span",
								null,
								"ea"
							)
						)
					),
					React.createElement(
						"dl",
						null,
						React.createElement(
							"dt",
							null,
							React.createElement(
								"label",
								{ htmlFor: "frm_outer_margin" },
								"Outer Margin"
							)
						),
						React.createElement(
							"dd",
							null,
							React.createElement("input", {
								type: "number", name: "outer_margin", id: "frm_outer_margin",
								min: "1", max: "500",
								defaultValue: this.state.outer_margin }),
							React.createElement(
								"span",
								null,
								"px"
							)
						)
					),
					React.createElement(
						"dl",
						null,
						React.createElement(
							"dt",
							null,
							React.createElement(
								"label",
								{ htmlFor: "frm_inner_margin" },
								"Inner Margin"
							)
						),
						React.createElement(
							"dd",
							null,
							React.createElement("input", {
								type: "number", name: "inner_margin", id: "frm_inner_margin",
								min: "1", max: "500",
								defaultValue: this.state.inner_margin }),
							React.createElement(
								"span",
								null,
								"px"
							)
						)
					)
				),
				React.createElement(
					"nav",
					null,
					React.createElement(
						"span",
						null,
						React.createElement(
							"button",
							{ type: "reset", onClick: this.reset },
							"Reset"
						)
					),
					React.createElement(
						"span",
						null,
						React.createElement(
							"button",
							{ type: "button", className: "submit", onClick: this.submit },
							"Apply"
						)
					)
				)
			)
		);
	}
});
var Container_NavTop = React.createClass({

	displayName: 'Nav-top',

	getInitialState: function () {
		return {
			show_form: false
		};
	},

	/**
  * CLICK EVENTS
  */

	/**
  * Toggle setting form
  */
	toggleSetting: function (e) {
		var self = this;
		if (!this.state.show_form == true) {
			$(document).on('click', function (e) {
				if (!$(e.target).closest('#settings').length) {
					e.preventDefault();
					$(this).off('click');
					self.setState({ show_form: false });
				}
			});
		}
		this.setState({ show_form: !this.state.show_form });
	},

	/**
  * Action shuffle blocks
  */
	actShuffleBlocks: function () {
		log('action shuffle blocks');
	},

	/**
  * Action add blocks
  */
	actAddBlocks: function () {
		log('action add blocks');
	},

	/**
  * RENDER
  */
	render: function () {
		return React.createElement(
			'nav',
			{ className: 'nav-top' },
			React.createElement(
				'div',
				{ className: 'block' + (this.state.show_form ? ' is-active' : '') },
				React.createElement(
					'button',
					{ type: 'button', title: 'Edit preference', onClick: this.toggleSetting },
					React.createElement(
						'i',
						{ className: 'sp-ico ico-setting abs' },
						'Setting'
					)
				),
				React.createElement(Container_NavTop_Form, { update: this.props.update })
			),
			React.createElement(
				'div',
				{ className: 'block' },
				React.createElement(
					'button',
					{ type: 'button', title: 'Shuffle block', onClick: this.actShuffleBlocks },
					React.createElement(
						'i',
						{ className: 'sp-ico ico-arrow-random abs' },
						'Random block'
					)
				)
			),
			React.createElement(
				'div',
				{ className: 'block' },
				React.createElement(
					'button',
					{ type: 'button', title: 'Add block', onClick: this.actAddBlocks },
					React.createElement(
						'i',
						{ className: 'sp-ico ico-plus abs' },
						'Add block'
					)
				)
			)
		);
	}
});
var Container = React.createClass({

	displayName: 'Container',

	updatePreference: function (params) {
		log('trigger update setting');
		log(params);
	},

	/**
  * Generate
  */
	generate: function () {
		log('generate output');
	},

	/**
  * render
  */
	render: function () {
		return React.createElement(
			'div',
			{ className: 'ple-container' },
			React.createElement(Container_NavTop, { update: this.updatePreference }),
			React.createElement(Container_Gridster, null),
			React.createElement(Container_NavBottom, { generate: this.generate })
		);
	}
});
var Header = React.createClass({

	displayName: 'header',

	componentDidMount: function () {},

	render: function () {
		return React.createElement(
			"header",
			{ className: "ple-header" },
			React.createElement(
				"h1",
				null,
				"Photo Layout Editor"
			),
			React.createElement(
				"p",
				null,
				"사진 레이아웃 에디터입니다. 처음 시작하면 먼저 문서설정을 해주세요!"
			)
		);
	}
});
var Sidebar_Nav = React.createClass({

	displayName: 'Navigation',

	getInitialState: function () {
		return {
			inputFile: React.createElement('input', { type: 'file', onChange: this.upload, multiple: true })
		};
	},

	/**
  * Attach images
  */
	attachImages: function () {
		log('attach image to grid block');
	},

	/**
  * Upload images
  */
	upload: function (e) {
		var uploadFiles = [];
		for (var i = 0; i < e.target.files.length; i++) {
			uploadFiles.push(e.target.files[i]);
		}

		// reset input[type=file]
		var $input = $(this.refs.inputFile);
		$input.replaceWith($input.val('').clone(true));

		// send sidebar component
		this.props.upload(uploadFiles);
	},

	/**
  * Remove images
  */
	remove: function () {
		log('remove image');
	},

	/**
  * render
  */
	render: function () {
		return React.createElement(
			'nav',
			{ className: 'nav-top' },
			React.createElement(
				'div',
				{ className: 'wrap' },
				React.createElement(
					'button',
					{ type: 'button', title: 'attach images', onClick: this.attachImages },
					React.createElement(
						'i',
						{ className: 'sp-ico ico-arrow-left abs' },
						'Moving the image to grid block'
					)
				),
				React.createElement(
					'span',
					{ title: 'upload images' },
					React.createElement('input', { type: 'file', ref: 'inputFile', onChange: this.upload, multiple: true }),
					React.createElement(
						'i',
						{ className: 'sp-ico ico-upload abs' },
						'upload images'
					)
				),
				React.createElement(
					'button',
					{ type: 'button', title: 'remove images', onClick: this.remove },
					React.createElement(
						'i',
						{ className: 'sp-ico ico-trash abs' },
						'remove images'
					)
				)
			)
		);
	}
});
// <button type="button" onClick={this.upload}></button>

var Sidebar_UploadFiles = React.createClass({

	displayName: 'UploadFiles',

	propTypes: {
		uploadImages: React.PropTypes.array,
		update: React.PropTypes.func
	},

	getInitialState: function () {
		return {
			is_multiSelect: false
		};
	},

	componentDidMount: function () {
		var self = this;
		var CTRL = 17;
		var CMD = 91;
		function onKeydown(e) {
			if (e.keyCode == CTRL || e.keyCode == CMD) {
				self.setState({ is_multiSelect: true });
				$(this).off('keydown').on('keyup', onKeyUp);
			}
		}
		function onKeyUp(e) {
			self.setState({ is_multiSelect: false });
			$(this).off('keyup').on('keydown', onKeydown);
		}
		$(window).on('keydown', onKeydown);
	},

	onSelect: function (e) {
		var currentKey = parseInt(e.currentTarget.getAttribute('data-key'));

		if (this.state.is_multiSelect) {
			this.props.uploadImages[currentKey].on = !this.props.uploadImages[currentKey].on;
		} else {
			this.props.uploadImages.forEach(function (data, key) {
				data.on = key == currentKey ? !data.on : false;
			});
		}

		this.props.update(this.props.uploadImages);
	},

	/**
  * render
  */
	render: function () {
		var self = this;
		var items = [];

		// make item elements
		this.props.uploadImages.forEach(function (item, key) {
			items.push(React.createElement(
				'li',
				{ key: key, 'data-key': key, onClick: self.onSelect },
				React.createElement(
					'span',
					{ style: item.style, className: item.on ? 'on' : '' },
					'.img'
				)
			));
		});

		return React.createElement(
			'div',
			{ className: 'upload-files' },
			React.createElement(
				'ul',
				{ ref: 'items' },
				items
			)
		);
	}
});
var Sidebar = React.createClass({

	displayName: 'Sidebar',

	propTypes: {
		uploadScript: React.PropTypes.string
	},

	uploader: new Uploader(),

	getDefaultProps: function () {
		return {
			uploadScript: null
		};
	},

	getInitialState: function () {
		return {
			uploadImages: [{
				on: false,
				style: { backgroundImage: 'url(./assets/img/tmp-simg-01.jpg)' }
			}, {
				on: false,
				style: { backgroundImage: 'url(./assets/img/tmp-simg-02.jpg)' }
			}, {
				on: false,
				style: { backgroundImage: 'url(./assets/img/tmp-simg-03.jpg)' }
			}, {
				on: false,
				style: { backgroundImage: 'url(./assets/img/tmp-simg-04.jpg)' }
			}]
		};
	},

	/**
  * upload images
  *
  * @Param {Files} array
  */
	upload: function (files) {
		var result = null;
		if (this.props.uploadScript) {
			this.uploader.external(this.props.uploadScript, files, function (data) {
				log(data);
			});
		} else {
			this.uploader.local(files, function (data) {
				log(data);
			});
		}
		// TODO : 위에 스크립트를 사용하여 {on, style: {backgroundImage}} 형식의 데이터를 만들어내는게 목표
	},

	remove: function () {
		log('remove file');
	},

	attach: function () {
		log('attach file');
	},

	update: function (data) {
		this.setState({ uploadImages: data });
	},

	/**
  * render
  */
	render: function () {
		return React.createElement(
			'aside',
			{ className: 'ple-sidebar' },
			React.createElement(Sidebar_Nav, { upload: this.upload, remove: this.remove, attach: this.attach }),
			React.createElement(Sidebar_UploadFiles, { uploadImages: this.state.uploadImages, update: this.update })
		);
	}
});
var Sidebar_UploadFiles_Item = React.createClass({

	displayName: 'Item',

	/**
  * render
  */
	render: function () {
		return React.createElement(
			'li',
			{ onClick: this.select },
			React.createElement(
				'span',
				{ style: this.props.style },
				'.img'
			)
		);
	}
});
function Uploader()
{
	/**
	 * Local upload
	 *
	 * @Param {Array} files
	 * @Param {Function} complete
	 * @Return {Array}
	 */
	this.local = function(files, complete)
	{
		var reader = new FileReader();
		var i = 0;
		var result = [];
		reader.onload = function(e)
		{
			result.push(e.target.result);

			// check last queue
			if (i == (files.length - 1))
			{
				complete(result);
			}
			else
			{
				// trigger next queue
				i++;
				reader.readAsDataURL(files[i]);
			}
		};
		reader.readAsDataURL(files[i]);
	};

	/**
	 * External upload
	 *
	 * @Param {String} script
	 * @Param {Array} files
	 * @Return {Array}
	 */
	this.external = function(script, files)
	{
		log('external upload');
	}
}
//# sourceMappingURL=../maps/PhotoLayoutEditor.min.js.map
